@startuml UnboxingItem

actor User
participant "Browser: Unbox"
participant Web3
participant "Backend: Unboxing"
participant IPFS
participant "Smart Contract"

User -> "Browser: Unbox": Click "Unbox" btn
"Browser: Unbox" -> "Backend: Unboxing": axios.get(route: unbox-item)
"Backend: Unboxing" -> "Backend: Unboxing": extractItem(commonProbability,rareProbability)
"Backend: Unboxing" --> "Browser: Unbox": unboxed item default json
"Browser: Unbox" -> Web3: getNextItemID()
Web3 -> "Smart Contract": getNextItemID()
"Smart Contract" --> Web3: next item id
Web3 --> "Browser: Unbox": next item id
"Browser: Unbox" -> IPFS: ipfs.add(itemMetadata)
IPFS --> "Browser: Unbox": CID - metadataURI
"Browser: Unbox" -> Web3: payToMint(account, metadataURI, metadataURI_b32)
Web3 -> "Smart Contract": payToMint(account, metadataURI, metadataURI_b32)
alt successfull transaction
    "Smart Contract" -> "Smart Contract": _mint(recipient, newItemId)
    "Smart Contract" --> Web3: Transaction Succeeded
    Web3 --> "Browser: Unbox": Transaction Succeeded 
    "Browser: Unbox" --> User: Modal showing unboxed item (img, type, rarity)

else failed transaction

    "Smart Contract" --> Web3: error
    Web3 --> "Browser: Unbox": error
    "Browser: Unbox" --> User: error
    "Browser: Unbox" -> IPFS: ipfs.pin.rm(metadataURI)
    IPFS --> "Browser: Unbox": operation status code
    end 

@enduml
